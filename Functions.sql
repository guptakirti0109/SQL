### Functions

#Basic Aggregate Functions

use sakila;

#Question 1: Retrieve the total number of rentals made in the Sakila database.Hint: Use the COUNT() function.
select count(rental_id) as Total_rentals from rental;

#Question 2: Find the average rental duration (in days) of movies rented from the Sakila database.Hint: Utilize the AVG() function.
select avg(rental_duration) as Avg_rental_duration from film;

#Question 3: Display the first name and last name of customers in uppercase.Hint: Use the UPPER () function.
select lower(first_name),lower(last_name) from customer;
select upper(first_name),upper(last_name) from customer;

#Question 4: Extract the month from the rental date and display it alongside the rental ID.Hint: Employ the MONTH() function.
select date(rental_date) as rental_date,rental_id, 
month(rental_date) as rental_month 
from rental;

#Question 5: Retrieve the count of rentals for each customer (display customer ID and the count of rentals).Hint: Use COUNT () in conjunction with GROUP BY.
select count(rental_id) as rentals_count, customer_id from rental
group by customer_id
order by rentals_count desc;

#Question 6: Find the total revenue generated by each store.Hint: Combine SUM() and GROUP BY.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN staff st ON p.staff_id = st.staff_id
JOIN store s ON st.store_id = s.store_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;

#Question 7: Determine the total number of rentals for each category of movies.Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
SELECT c.name AS category, COUNT(r.rental_id) AS total_rentals
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY total_rentals DESC;

#Question 8: Find the average rental rate of movies in each language.Hint: JOIN film and language tables, then use AVG () and GROUP BY.
SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name
ORDER BY avg_rental_rate DESC;

#Questions 9: Display the title of the movie, customer's first name, and last name who rented it.Hint: Use JOIN between the film, inventory, rental, and customer tables.
select title,first_name,last_name 
from rental
join inventory on rental.inventory_id = inventory.inventory_id
join  film  on  inventory.film_id = film.film_id
join customer on rental.customer_id = customer.customer_id
order by first_name,last_name ;

#Question 10: Retrieve the names of all actors who have appeared in the film "Gone with the Wind." Hint: Use JOIN between the film actor, film, and actor tables.
select title, first_name,last_name
from actor
join film_actor on actor.actor_id = film_actor.actor_id
join film on film_actor.film_id = film.film_id
where title = 'Gone with the Wind'
order by first_name,last_name;

#Question 11: Retrieve the customer names along with the total amount they've spent on rentals.Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
select concat(first_name,' ',last_name) as cust_name, sum(amount) as total_amount
from payment
join rental on payment.rental_id = rental.rental_id
join customer on rental.customer_id = customer.customer_id
group by cust_name
order by sum(amount) desc;

#Question 12: List the titles of movies rented by each customer in a particular city (e.g., 'London').Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
SELECT c.first_name, c.last_name, ct.city, f.title
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ct ON a.city_id = ct.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ct.city = 'London'
ORDER BY c.last_name, c.first_name, f.title;

### Advance joins and group by

#Question 13: Display the top 5 rented movies along with the number of times they've been rented.Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
select title, count(rental_id) as rental_count
from rental
join inventory on rental.inventory_id = inventory.inventory_id
join film on inventory.film_id = film.film_id
group by title
order by rental_count
limit 5;

#Question 14: Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
SELECT c.customer_id, c.first_name, c.last_name
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
JOIN customer c ON r.customer_id = c.customer_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT i.store_id) = 2
ORDER BY c.last_name, c.first_name;