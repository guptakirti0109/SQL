### Windows Function

#Q1. Rank the customers based on the total amount they've spent on rentals.
SELECT c.customer_id, 
       c.first_name, 
       c.last_name, 
SUM(p.amount) AS total_spent,
RANK() OVER (ORDER BY SUM(p.amount) DESC) as customers_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;

#Q2. Calculate the cumulative revenue generated by each film over time.
SELECT f.film_id,
       f.title,
       r.payment_date,
SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.payment_date) AS cumulative_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
ORDER BY f.film_id, r.payment_date;

#Q3. Determine the average rental duration for each film, considering films with similar lengths.
SELECT f.film_id,
       f.title,
       f.length AS film_length,
       ROUND(AVG(DATEDIFF(r.return_date, r.rental_date)), 2) AS avg_rental_duration,
       NTILE(5) OVER (ORDER BY f.length) AS length_group
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.return_date IS NOT NULL  -- Exclude ongoing rentals
GROUP BY f.film_id, f.title, f.length
ORDER BY length_group, avg_rental_duration DESC;

#Q4. Identify the top 3 films in each category based on their rental counts.
WITH FilmRentalCounts AS (
SELECT f.film_id,
           f.title,
           c.name AS category,
           COUNT(r.rental_id) AS rental_count,
RANK() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS rental_count_rank
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY f.film_id, f.title, c.name
)
SELECT film_id, title, category, rental_count, rental_count_rank
FROM FilmRentalCounts
WHERE rental_count_rank <= 3
ORDER BY category, rental_count_rank;

#Q5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
WITH CustomerRentalCounts AS (
    SELECT c.customer_id,
           c.first_name,
           c.last_name,
           COUNT(r.rental_id) AS total_rentals
    FROM customer c
    JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
),
AverageRentals AS (
    SELECT AVG(total_rentals) AS avg_rentals
    FROM CustomerRentalCounts
)
SELECT c.customer_id,
       c.first_name,
       c.last_name,
       c.total_rentals,
       a.avg_rentals,
       (c.total_rentals - a.avg_rentals) AS rental_difference
FROM CustomerRentalCounts c
CROSS JOIN AverageRentals a
ORDER BY rental_difference DESC;

#Q6. Find the monthly revenue trend for the entire rental store over time.
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
       SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY month
ORDER BY month;

#Q7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH CustomerSpending AS (
    SELECT c.customer_id,
           c.first_name,
           c.last_name,
           SUM(p.amount) AS total_spent
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
),
SpendingThreshold AS (
SELECT PERCENTILE_COUNT(0.8) WITHIN GROUP (ORDER BY total_spent) AS top_20_threshold
FROM CustomerSpending 
)
SELECT cs.customer_id,
       cs.first_name,
       cs.last_name,
       cs.total_spent
FROM CustomerSpending cs
JOIN SpendingThreshold st ON cs.total_spent >= st.top_20_threshold
ORDER BY cs.total_spent DESC;

#Q8. Calculate the running total of rentals per category, ordered by rental count.
WITH CategoryRentalCounts AS (
    SELECT c.name AS category,
           COUNT(r.rental_id) AS rental_count
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.name
)
SELECT category,
       rental_count,
       SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM CategoryRentalCounts
ORDER BY rental_count DESC;

#Q9. Find the films that have been rented less than the average rental count for their respective categories.
WITH FilmRentalCounts AS (
    SELECT f.film_id,
           f.title,
           c.name AS category,
           COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY f.film_id, f.title, c.name
),
CategoryAverageRentals AS (
    SELECT c.name AS category,
           AVG(frc.rental_count) AS avg_rental_count
    FROM FilmRentalCounts frc
    GROUP BY c.name
)
SELECT frc.film_id,
       frc.title,
       frc.category,
       frc.rental_count,
       car.avg_rental_count
FROM FilmRentalCounts frc
JOIN CategoryAverageRentals car ON frc.category = car.category
WHERE frc.rental_count < car.avg_rental_count
ORDER BY frc.category, frc.rental_count ASC;

#Q10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
       SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY month
ORDER BY total_revenue DESC
LIMIT 5;





